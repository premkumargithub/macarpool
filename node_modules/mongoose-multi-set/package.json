{
  "name": "mongoose-multi-set",
  "description": "Mongoose plugin that allows you to update a model with multiple values at once (while still keeping the schema validation)",
  "version": "0.1.0",
  "author": {
    "name": "Dan Caragea",
    "email": "dancaragea@gmail.com"
  },
  "keywords": [
    "mongodb",
    "mongoose",
    "plugin",
    "multi",
    "multiple",
    "update"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/terebentina/mongoose-multi-set.git"
  },
  "license": "MIT",
  "engine": {
    "node": ">= 0.6"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/terebentina/mongoose-multi-set/issues"
  },
  "readme": "Mongoose Multi Set Plugin\n==========================\n\nSimple plugin for [Mongoose](https://github.com/LearnBoost/mongoose) that allows you to do:\n```javascript\n\tuser.multiSet(req.query, ['username', 'age', 'name']);\n```\ninstead of\n```javascript\n\tuser.username = req.query.username;\n\tuser.age = req.query.age;\n\tuser.name = req.query.name;\n```\n\nUseful when you want to set more values in the model at once.\nThe plugin doesn't interfere with the validation rules in the model, unlike the Model.update() function or the Schema.findByIdAndUpdate(). This plugin doesn't save the model either,\nthis is the job of the calling code.\n\n\n## Installation\n\n`npm install mongoose-multi-set --save`\n\n## Usage\n\nmodel.multiSet(`{object}`, `[allowed fields]`, `ignoreMissing`);\n\nWhere `{object}` is an object like {field1: value1, field2: value2,...} with fields to set and their values.\n\n`[allowed fields]` is an array of fields from the `{object}` that are allowed to be set in the model.\n\n`ignoreMissing` an optional boolean to either skip over undefined values or force set the model fields to undefined. Defaults to true (skip/do nothing for undefined values).\nThis could be useful when you're modifying an existing model - setting some fields to undefined or leaving them unaltered.\n\nYou'd use this plugin to update the model from, say, req.query, when you have proper validation in place.\n\n```javascript\nvar UserSchema = new Schema({\n    username: String,\n    name: String,\n    age: Number\n});\nUserSchema.plugin(require('mongoose-multi-set'));\nvar User = mongoose.model('User', UserSchema);\nUser.findById('1234', function(err, user) {\n\t// say req.query is {username: 'Foo', name: 'Bar', age: 25}\n\tuser.multiSet(req.query, ['username', 'age']);\n\tuser.save(function(err) {\n\t\thandleValidationErrors(err);\n\t});\n});\n```\nThe User model will now have the `username` and `age` properties set from req.query.\n\n - The plugin doesn't let you update the `id` or `_id` properties of the model. If you really want to update the id of the model, you can do so manually ;)\n - The `[allowed fields]` parameter is required to make sure only the desired fields are updated.\n\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Dan Caragea &lt;dancaragea@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "homepage": "https://github.com/terebentina/mongoose-multi-set",
  "_id": "mongoose-multi-set@0.1.0",
  "dist": {
    "shasum": "895cf99e38f66ee168cdd2bcfd027136a02a43e1"
  },
  "_from": "mongoose-multi-set@~0.1.0",
  "_resolved": "https://registry.npmjs.org/mongoose-multi-set/-/mongoose-multi-set-0.1.0.tgz"
}
